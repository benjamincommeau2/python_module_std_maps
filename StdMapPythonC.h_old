/*
This code was taken from Dan Foreman-Mackey and modified.
Source Code : https://gist.github.com/dfm/3247796
Source Documentation : http://dan.iel.fm/posts/python-c-extensions/
clear ; python setup_fgt.py build_ext --inplace
clear ; python test_fgt.py
*/
#define NPY_NO_DEPRECATED_API NPY_1_6_API_VERSION
#include </usr/include/python3.6/Python.h>
#include </usr/local/lib/python3.6/dist-packages/numpy/core/include/numpy/arrayobject.h>
#include <stdio.h>
#include <complex.h>
#include <stdint.h>
#include <inttypes.h>
#include <stdlib.h>
#include <complex>
#ifndef STDMAPPYTHONC
#define STDMAPPYTHONC
//#include <cmath.h>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// c function declarations//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class StdMapPythonC{
public:
void fht(std::complex<double> *x, int64_t n,int64_t NN, int64_t i1,int64_t j1);
void norm(std::complex<double> *x,std::complex<double> a,int64_t NN);
void g2m_coor(int64_t * x,int64_t* y,int64_t *mask);
void m2g_coor(int64_t * x,int64_t* y,int64_t *mask);
void matrix_pad_copy(std::complex<double> *x, std::complex<double>  *y,int64_t *N,int64_t *NN);
int64_t CountOnesFromInteger(int64_t value);
void rear(std::complex<double> *x,int64_t NN);
void irear(std::complex<double> *x,int64_t NN);
int64_t init_arrays(PyObject *self, PyObject *args, PyObject **x_obj, PyObject **x_array,  PyObject **y_array, std::complex<double> **x,  std::complex<double> **y, int64_t *N, int64_t *NN);
void parity(std::complex<double> *z,int NN);
void iparity(std::complex<double> *z,int NN);
/*
Available functions 
This is a declaration of a structure type.
This is our declaration of our 'fgt_fgt' function for python.
It specifies all input and output objects of our function.
The name that we've given to the function (fgt_fgt) is also a matter of convention and nessaray because {module_name}_{function_name}. 
The name for this c file given as '_fgt' is a matter of convention and necessary.
Calling the function in python is _fgt.fgt(), where _fgt is the name of the module and fgt is the name of the function. 
the '_' for c is equivalent for the '.' in python in regards to class extensions
*/
static PyObject *rear_fgt(PyObject *self, PyObject *args); 
static PyObject *irear_fgt(PyObject *self, PyObject *args); 
static PyObject *fgt_fgt(PyObject *self, PyObject *args);
static PyObject *ifgt_fgt(PyObject *self, PyObject *args);
static PyObject *parity_fgt(PyObject *self, PyObject *args);
static PyObject *iparity_fgt(PyObject *self, PyObject *args);
static PyObject *auto_pad_fgt(PyObject *self, PyObject *args);
static PyObject *fhgt_fgt(PyObject *self, PyObject *args);
static PyObject *ifhgt_fgt(PyObject *self, PyObject *args);
extern PyMODINIT_FUNC init_fgt();
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// python documentation ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
Docstrings module_docstring
Below establishes documentation for our fgt function
In python executing 'fgt?' or 'help(fgt)' will display 'fgt_docstring' in the terminal
Malloc cannot be used, because the program has no specified shutdown time. The module is imported, not called.
 */
static char module_docstring;
static char rear_docstring;
static char irear_docstring;
static char fgt_docstring;
static char ifgt_docstring;
static char fhgt_docstring;
static char ifhgt_docstring;
static char parity_docstring;
static char iparity_docstring;
static char auto_pad_docstring;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// python module initialization ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
Module specification
This specifies all functional members of this python module
In our case there is only one, which is 'fgt_fgt' as defined above
*/
static PyMethodDef module_methods;
/*
Initialize the module.
This initializes are module containing our function.
This initializing module function must be named as 'init'+'ourmodulename',
which in our case will be 'init'+'_fgt' = 'init_fgt' .
*/
};
#endif
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Things to Do for Completition ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 * memory leakage check? Use proper dereferencing, create a dereferencing function
 * dereferening any of the python objects caused segmentation faults?
 * Debug Depriation Warning
 * transform from pauli base to gamma base?
 * raise python errors and their messages up function levels properly
 * Write a manaul for installing all required packages, provide installation instructions if import fails
 * * sudo apt-get purge python-numpy # if all ready installed and out of date
 * * sudo apt-get install python-pip # if not installed
 * * sudo apt-get install python-dev # if not installed
 * * sudo apt-get install g++ # if not installed
 * * sudo pip install numpy # if not installed or not update to date
 * 
 * */

